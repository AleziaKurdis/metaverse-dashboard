{"version":3,"sources":["webpack:///../../../src/components/VForm/VForm.ts","webpack:///../../../src/components/VSlideGroup/VSlideGroup.ts","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts"],"names":["name","provide","form","this","inheritAttrs","props","disabled","lazyValidation","readonly","value","Boolean","data","inputs","watchers","errorBag","watch","handler","errors","Object","deep","immediate","methods","watchInput","watcher","input","val","_uid","valid","shouldValidate","validate","filter","reset","resetErrorBag","setTimeout","resetValidation","register","unregister","found","find","i","unwatch","render","h","staticClass","attrs","novalidate","attrs$","on","submit","e","$slots","BaseSlideGroup","directives","Resize","Touch","activeClass","type","default","centerActive","nextIcon","prevIcon","showArrows","validator","v","internalItemsLength","isOverflowing","resizeTimeout","startX","scrollOffset","widths","content","wrapper","computed","__cachedNext","genTransition","__cachedPrev","classes","hasAffixes","Math","isMobile","hasNext","hasPrev","internalValue","beforeUpdate","$children","updated","genNext","slot","$scopedSlots","next","$createElement","class","click","key","genContent","ref","genData","onResize","genIcon","icon","$vuetify","rtl","location","upperLocation","hasAffix","genPrev","prev","genWrapper","start","move","end","calculateNewOffset","sign","newAbosluteOffset","direction","onAffixClick","onTouchStart","onTouchMove","onTouchEnd","maxScrollOffset","overflowCheck","fn","scrollIntoView","items","lastItemPosition","length","wrapperPosition","$refs","selectedIndex","calculateCenteredOffset","selectedItem","calculateUpdatedOffset","clientWidth","selectedElement","offsetLeft","currentScrollOffset","totalWidth","itemOffset","additionalOffset","offsetCentered","scrollTo","setWidths","window","slideGroup","defaultMenuProps","offsetY","offsetOverflow","transition","allowOverflow","autoSelectFirst","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","String","lazySearch","computedItems","selectedValues","selectedItems","map","item","hasDisplayedItems","hideSelected","filteredItems","some","currentRange","getText","internalSearch","allItems","text","get","set","isAnyValueAllowed","isDirty","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","listData","isFocused","document","isMenuActive","oldVal","activateMenu","created","destroyed","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","clearableCallback","genInput","autocomplete","domProps","genInputSlot","genSelections","hasSlot","onClick","isAppendInner","onInput","target","onKeyDown","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","event"],"mappings":"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","file":"js/chunk-35054643.48c87963.js","sourcesContent":["// Components\nimport VInput from '../VInput/VInput'\n\n// Mixins\nimport mixins from '../../util/mixins'\nimport BindsAttrs from '../../mixins/binds-attrs'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Helpers\nimport { VNode } from 'vue'\n\ntype ErrorBag = Record<number, boolean>\ntype VInputInstance = InstanceType<typeof VInput>\ntype Watchers = {\n  _uid: number\n  valid: () => void\n  shouldValidate: () => void\n}\n\n/* @vue/component */\nexport default mixins(\n  BindsAttrs,\n  RegistrableProvide('form')\n  /* @vue/component */\n).extend({\n  name: 'v-form',\n\n  provide (): object {\n    return { form: this }\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    disabled: Boolean,\n    lazyValidation: Boolean,\n    readonly: Boolean,\n    value: Boolean,\n  },\n\n  data: () => ({\n    inputs: [] as VInputInstance[],\n    watchers: [] as Watchers[],\n    errorBag: {} as ErrorBag,\n  }),\n\n  watch: {\n    errorBag: {\n      handler (val) {\n        const errors = Object.values(val).includes(true)\n\n        this.$emit('input', !errors)\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n\n  methods: {\n    watchInput (input: any): Watchers {\n      const watcher = (input: any): (() => void) => {\n        return input.$watch('hasError', (val: boolean) => {\n          this.$set(this.errorBag, input._uid, val)\n        }, { immediate: true })\n      }\n\n      const watchers: Watchers = {\n        _uid: input._uid,\n        valid: () => {},\n        shouldValidate: () => {},\n      }\n\n      if (this.lazyValidation) {\n        // Only start watching inputs if we need to\n        watchers.shouldValidate = input.$watch('shouldValidate', (val: boolean) => {\n          if (!val) return\n\n          // Only watch if we're not already doing it\n          if (this.errorBag.hasOwnProperty(input._uid)) return\n\n          watchers.valid = watcher(input)\n        })\n      } else {\n        watchers.valid = watcher(input)\n      }\n\n      return watchers\n    },\n    /** @public */\n    validate (): boolean {\n      return this.inputs.filter(input => !input.validate(true)).length === 0\n    },\n    /** @public */\n    reset (): void {\n      this.inputs.forEach(input => input.reset())\n      this.resetErrorBag()\n    },\n    resetErrorBag () {\n      if (this.lazyValidation) {\n        // Account for timeout in validatable\n        setTimeout(() => {\n          this.errorBag = {}\n        }, 0)\n      }\n    },\n    /** @public */\n    resetValidation () {\n      this.inputs.forEach(input => input.resetValidation())\n      this.resetErrorBag()\n    },\n    register (input: VInputInstance) {\n      this.inputs.push(input)\n      this.watchers.push(this.watchInput(input))\n    },\n    unregister (input: VInputInstance) {\n      const found = this.inputs.find(i => i._uid === input._uid)\n\n      if (!found) return\n\n      const unwatch = this.watchers.find(i => i._uid === found._uid)\n      if (unwatch) {\n        unwatch.valid()\n        unwatch.shouldValidate()\n      }\n\n      this.watchers = this.watchers.filter(i => i._uid !== found._uid)\n      this.inputs = this.inputs.filter(i => i._uid !== found._uid)\n      this.$delete(this.errorBag, found._uid)\n    },\n  },\n\n  render (h): VNode {\n    return h('form', {\n      staticClass: 'v-form',\n      attrs: {\n        novalidate: true,\n        ...this.attrs$,\n      },\n      on: {\n        submit: (e: Event) => this.$emit('submit', e),\n      },\n    }, this.$slots.default)\n  },\n})\n","// Styles\nimport './VSlideGroup.sass'\n\n// Components\nimport VIcon from '../VIcon'\nimport { VFadeTransition } from '../transitions'\n\n// Extensions\nimport { BaseItemGroup } from '../VItemGroup/VItemGroup'\n\n// Mixins\nimport Mobile from '../../mixins/mobile'\n\n// Directives\nimport Resize from '../../directives/resize'\nimport Touch from '../../directives/touch'\n\n// Utilities\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode } from 'vue'\n\ninterface TouchEvent {\n  touchstartX: number\n  touchmoveX: number\n  stopPropagation: Function\n}\n\ninterface Widths {\n  content: number\n  wrapper: number\n}\n\ninterface options extends Vue {\n  $refs: {\n    content: HTMLElement\n    wrapper: HTMLElement\n  }\n}\n\nexport const BaseSlideGroup = mixins<options &\n/* eslint-disable indent */\n  ExtractVue<[\n    typeof BaseItemGroup,\n    typeof Mobile,\n  ]>\n/* eslint-enable indent */\n>(\n  BaseItemGroup,\n  Mobile,\n  /* @vue/component */\n).extend({\n  name: 'base-slide-group',\n\n  directives: {\n    Resize,\n    Touch,\n  },\n\n  props: {\n    activeClass: {\n      type: String,\n      default: 'v-slide-item--active',\n    },\n    centerActive: Boolean,\n    nextIcon: {\n      type: String,\n      default: '$next',\n    },\n    prevIcon: {\n      type: String,\n      default: '$prev',\n    },\n    showArrows: {\n      type: [Boolean, String],\n      validator: v => (\n        typeof v === 'boolean' || [\n          'always',\n          'desktop',\n          'mobile',\n        ].includes(v)\n      ),\n    },\n  },\n\n  data: () => ({\n    internalItemsLength: 0,\n    isOverflowing: false,\n    resizeTimeout: 0,\n    startX: 0,\n    scrollOffset: 0,\n    widths: {\n      content: 0,\n      wrapper: 0,\n    },\n  }),\n\n  computed: {\n    __cachedNext (): VNode {\n      return this.genTransition('next')\n    },\n    __cachedPrev (): VNode {\n      return this.genTransition('prev')\n    },\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-slide-group': true,\n        'v-slide-group--has-affixes': this.hasAffixes,\n        'v-slide-group--is-overflowing': this.isOverflowing,\n      }\n    },\n    hasAffixes (): Boolean {\n      switch (this.showArrows) {\n        // Always show arrows on desktop & mobile\n        case 'always': return true\n\n        // Always show arrows on desktop\n        case 'desktop': return !this.isMobile\n\n        // Show arrows on mobile when overflowing.\n        // This matches the default 2.2 behavior\n        case true: return this.isOverflowing || Math.abs(this.scrollOffset) > 0\n\n        // Always show on mobile\n        case 'mobile': return (\n          this.isMobile ||\n          (this.isOverflowing || Math.abs(this.scrollOffset) > 0)\n        )\n\n        // https://material.io/components/tabs#scrollable-tabs\n        // Always show arrows when\n        // overflowed on desktop\n        default: return (\n          !this.isMobile &&\n          (this.isOverflowing || Math.abs(this.scrollOffset) > 0)\n        )\n      }\n    },\n    hasNext (): boolean {\n      if (!this.hasAffixes) return false\n\n      const { content, wrapper } = this.widths\n\n      // Check one scroll ahead to know the width of right-most item\n      return content > Math.abs(this.scrollOffset) + wrapper\n    },\n    hasPrev (): boolean {\n      return this.hasAffixes && this.scrollOffset !== 0\n    },\n  },\n\n  watch: {\n    internalValue: 'setWidths',\n    // When overflow changes, the arrows alter\n    // the widths of the content and wrapper\n    // and need to be recalculated\n    isOverflowing: 'setWidths',\n    scrollOffset (val) {\n      this.$refs.content.style.transform = `translateX(${-val}px)`\n    },\n  },\n\n  beforeUpdate () {\n    this.internalItemsLength = (this.$children || []).length\n  },\n\n  updated () {\n    if (this.internalItemsLength === (this.$children || []).length) return\n    this.setWidths()\n  },\n\n  methods: {\n    // Always generate next for scrollable hint\n    genNext (): VNode | null {\n      const slot = this.$scopedSlots.next\n        ? this.$scopedSlots.next({})\n        : this.$slots.next || this.__cachedNext\n\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__next',\n        class: {\n          'v-slide-group__next--disabled': !this.hasNext,\n        },\n        on: {\n          click: () => this.onAffixClick('next'),\n        },\n        key: 'next',\n      }, [slot])\n    },\n    genContent (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__content',\n        ref: 'content',\n      }, this.$slots.default)\n    },\n    genData (): object {\n      return {\n        class: this.classes,\n        directives: [{\n          name: 'resize',\n          value: this.onResize,\n        }],\n      }\n    },\n    genIcon (location: 'prev' | 'next'): VNode | null {\n      let icon = location\n\n      if (this.$vuetify.rtl && location === 'prev') {\n        icon = 'next'\n      } else if (this.$vuetify.rtl && location === 'next') {\n        icon = 'prev'\n      }\n\n      const upperLocation = `${location[0].toUpperCase()}${location.slice(1)}`\n      const hasAffix = (this as any)[`has${upperLocation}`]\n\n      if (\n        !this.showArrows &&\n        !hasAffix\n      ) return null\n\n      return this.$createElement(VIcon, {\n        props: {\n          disabled: !hasAffix,\n        },\n      }, (this as any)[`${icon}Icon`])\n    },\n    // Always generate prev for scrollable hint\n    genPrev (): VNode | null {\n      const slot = this.$scopedSlots.prev\n        ? this.$scopedSlots.prev({})\n        : this.$slots.prev || this.__cachedPrev\n\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__prev',\n        class: {\n          'v-slide-group__prev--disabled': !this.hasPrev,\n        },\n        on: {\n          click: () => this.onAffixClick('prev'),\n        },\n        key: 'prev',\n      }, [slot])\n    },\n    genTransition (location: 'prev' | 'next') {\n      return this.$createElement(VFadeTransition, [this.genIcon(location)])\n    },\n    genWrapper (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-slide-group__wrapper',\n        directives: [{\n          name: 'touch',\n          value: {\n            start: (e: TouchEvent) => this.overflowCheck(e, this.onTouchStart),\n            move: (e: TouchEvent) => this.overflowCheck(e, this.onTouchMove),\n            end: (e: TouchEvent) => this.overflowCheck(e, this.onTouchEnd),\n          },\n        }],\n        ref: 'wrapper',\n      }, [this.genContent()])\n    },\n    calculateNewOffset (direction: 'prev' | 'next', widths: Widths, rtl: boolean, currentScrollOffset: number) {\n      const sign = rtl ? -1 : 1\n      const newAbosluteOffset = sign * currentScrollOffset +\n        (direction === 'prev' ? -1 : 1) * widths.wrapper\n\n      return sign * Math.max(Math.min(newAbosluteOffset, widths.content - widths.wrapper), 0)\n    },\n    onAffixClick (location: 'prev' | 'next') {\n      this.$emit(`click:${location}`)\n      this.scrollTo(location)\n    },\n    onResize () {\n      /* istanbul ignore next */\n      if (this._isDestroyed) return\n\n      this.setWidths()\n    },\n    onTouchStart (e: TouchEvent) {\n      const { content } = this.$refs\n\n      this.startX = this.scrollOffset + e.touchstartX as number\n\n      content.style.setProperty('transition', 'none')\n      content.style.setProperty('willChange', 'transform')\n    },\n    onTouchMove (e: TouchEvent) {\n      this.scrollOffset = this.startX - e.touchmoveX\n    },\n    onTouchEnd () {\n      const { content, wrapper } = this.$refs\n      const maxScrollOffset = content.clientWidth - wrapper.clientWidth\n\n      content.style.setProperty('transition', null)\n      content.style.setProperty('willChange', null)\n\n      if (this.$vuetify.rtl) {\n        /* istanbul ignore else */\n        if (this.scrollOffset > 0 || !this.isOverflowing) {\n          this.scrollOffset = 0\n        } else if (this.scrollOffset <= -maxScrollOffset) {\n          this.scrollOffset = -maxScrollOffset\n        }\n      } else {\n        /* istanbul ignore else */\n        if (this.scrollOffset < 0 || !this.isOverflowing) {\n          this.scrollOffset = 0\n        } else if (this.scrollOffset >= maxScrollOffset) {\n          this.scrollOffset = maxScrollOffset\n        }\n      }\n    },\n    overflowCheck (e: TouchEvent, fn: (e: TouchEvent) => void) {\n      e.stopPropagation()\n      this.isOverflowing && fn(e)\n    },\n    scrollIntoView /* istanbul ignore next */ () {\n      if (!this.selectedItem && this.items.length) {\n        const lastItemPosition = this.items[this.items.length - 1].$el.getBoundingClientRect()\n        const wrapperPosition = this.$refs.wrapper.getBoundingClientRect()\n\n        if (\n          (this.$vuetify.rtl && wrapperPosition.right < lastItemPosition.right) ||\n          (!this.$vuetify.rtl && wrapperPosition.left > lastItemPosition.left)\n        ) {\n          this.scrollTo('prev')\n        }\n      }\n\n      if (!this.selectedItem) {\n        return\n      }\n\n      if (\n        this.selectedIndex === 0 ||\n        (!this.centerActive && !this.isOverflowing)\n      ) {\n        this.scrollOffset = 0\n      } else if (this.centerActive) {\n        this.scrollOffset = this.calculateCenteredOffset(\n          this.selectedItem.$el as HTMLElement,\n          this.widths,\n          this.$vuetify.rtl\n        )\n      } else if (this.isOverflowing) {\n        this.scrollOffset = this.calculateUpdatedOffset(\n          this.selectedItem.$el as HTMLElement,\n          this.widths,\n          this.$vuetify.rtl,\n          this.scrollOffset\n        )\n      }\n    },\n    calculateUpdatedOffset (selectedElement: HTMLElement, widths: Widths, rtl: boolean, currentScrollOffset: number): number {\n      const clientWidth = selectedElement.clientWidth\n      const offsetLeft = rtl\n        ? (widths.content - selectedElement.offsetLeft - clientWidth)\n        : selectedElement.offsetLeft\n\n      if (rtl) {\n        currentScrollOffset = -currentScrollOffset\n      }\n\n      const totalWidth = widths.wrapper + currentScrollOffset\n      const itemOffset = clientWidth + offsetLeft\n      const additionalOffset = clientWidth * 0.4\n\n      if (offsetLeft <= currentScrollOffset) {\n        currentScrollOffset = Math.max(offsetLeft - additionalOffset, 0)\n      } else if (totalWidth <= itemOffset) {\n        currentScrollOffset = Math.min(currentScrollOffset - (totalWidth - itemOffset - additionalOffset), widths.content - widths.wrapper)\n      }\n\n      return rtl ? -currentScrollOffset : currentScrollOffset\n    },\n    calculateCenteredOffset (selectedElement: HTMLElement, widths: Widths, rtl: boolean): number {\n      const { offsetLeft, clientWidth } = selectedElement\n\n      if (rtl) {\n        const offsetCentered = widths.content - offsetLeft - clientWidth / 2 - widths.wrapper / 2\n        return -Math.min(widths.content - widths.wrapper, Math.max(0, offsetCentered))\n      } else {\n        const offsetCentered = offsetLeft + clientWidth / 2 - widths.wrapper / 2\n        return Math.min(widths.content - widths.wrapper, Math.max(0, offsetCentered))\n      }\n    },\n    scrollTo /* istanbul ignore next */ (location: 'prev' | 'next') {\n      this.scrollOffset = this.calculateNewOffset(location, {\n        // Force reflow\n        content: this.$refs.content ? this.$refs.content.clientWidth : 0,\n        wrapper: this.$refs.wrapper ? this.$refs.wrapper.clientWidth : 0,\n      }, this.$vuetify.rtl, this.scrollOffset)\n    },\n    setWidths /* istanbul ignore next */  () {\n      window.requestAnimationFrame(() => {\n        const { content, wrapper } = this.$refs\n\n        this.widths = {\n          content: content ? content.clientWidth : 0,\n          wrapper: wrapper ? wrapper.clientWidth : 0,\n        }\n\n        // https://github.com/vuetifyjs/vuetify/issues/13212\n        // We add +1 to the wrappers width to prevent an issue where the `clientWidth`\n        // gets calculated wrongly by the browser if using a different zoom-level.\n        this.isOverflowing = this.widths.wrapper + 1 < this.widths.content\n\n        this.scrollIntoView()\n      })\n    },\n  },\n\n  render (h): VNode {\n    return h('div', this.genData(), [\n      this.genPrev(),\n      this.genWrapper(),\n      this.genNext(),\n    ])\n  },\n})\n\nexport default BaseSlideGroup.extend({\n  name: 'v-slide-group',\n\n  provide (): object {\n    return {\n      slideGroup: this,\n    }\n  },\n})\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n"],"sourceRoot":""}